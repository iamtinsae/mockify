generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? //@db.Text
    access_token             String? //@db.Text
    expires_at               Int?
    refresh_token_expires_in Int?
    token_type               String?
    scope                    String?
    id_token                 String? //@db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    username      String
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
    id          String     @id @default(cuid())
    name        String
    slug        String
    description String
    creatorId   String
    creator     User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    resources   Resource[]
}

model Resource {
    id        String     @id @default(cuid())
    name      String
    endPoints EndPoint[]
    project   Project?   @relation(fields: [projectId], references: [id])
    projectId String?
}

model EndPoint {
    id         String   @id @default(cuid())
    route      String
    method     Int
    resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
    resourceId String
    schemas    Schema[]

    @@unique([resourceId, route, method])
}

model Schema {
    id         String   @id
    name       String
    type       String
    EndPoint   EndPoint @relation(fields: [endPointId], references: [id])
    endPointId String
}
